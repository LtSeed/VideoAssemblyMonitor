package nusri.fyp.demo.roboflow.data.entity;

import lombok.Data;
import nusri.fyp.demo.roboflow.data.AnyData;

/**
 * Description of a processing block within a workflow.
 * <br> This class provides metadata about a processing block, including its schema, input/output characteristics,
 * and various properties that define how it behaves within a larger workflow system.
 */
@Data
public class BlockDescription {

    /**
     * The schema for the block, defined as a dynamic data structure.
     * <br> This property describes the block's schema and how it interacts with other components in the workflow.
     */
    private AnyData blockSchema;

    /**
     * The outputs associated with the block, defined as a list of dynamic output definitions.
     * <br> This property lists all possible outputs generated by the block, with each output being defined by its own set of characteristics.
     */
    private DynamicOutputDefinition[] outputsManifest;

    /**
     * The source of the block.
     * <br> This property provides information about where the block is sourced from or how it is defined in the system.
     */
    private String blockSource;

    /**
     * The fully qualified name of the block's class.
     * <br> This field holds the fully qualified class name for the processing block, which is used for identification.
     */
    private String fullyQualifiedBlockClassName;

    /**
     * A human-friendly name for the block.
     * <br> This field is used to provide a more user-friendly or readable name for the block.
     */
    private String humanFriendlyBlockName;

    /**
     * The identifier for the block's manifest type.
     * <br> This field uniquely identifies the type of manifest used by the block within the workflow system.
     */
    private String manifestTypeIdentifier;

    /**
     * Aliases for the manifest type identifier.
     * <br> This field holds any alternate names or identifiers that are considered equivalent to the `manifestTypeIdentifier`.
     */
    private String[] manifestTypeIdentifierAliases;

    /**
     * Compatibility of the block with different execution engines.
     * <br> This field, if provided, specifies which execution engines the block is compatible with.
     */
    private String executionEngineCompatibility;

    /**
     * The dimensionality offsets for the block's inputs.
     * <br> This field provides data related to the input dimensionality adjustments necessary for the block to operate properly.
     */
    private AnyData inputDimensionalityOffsets;

    /**
     * The reference property for dimensionality.
     * <br> This optional field defines the reference property that is used to determine the block's dimensionality.
     */
    private String dimensionalityReferenceProperty;

    /**
     * The offset applied to the block's output dimensionality.
     * <br> This field specifies how the block's output dimensionality is adjusted.
     */
    private Integer outputDimensionalityOffset;
}
